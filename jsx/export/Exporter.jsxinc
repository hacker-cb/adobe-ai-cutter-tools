//@include "../const.jsxinc"
//@include "../lib/AppUtils.jsxinc"
//@include "../lib/DocUtils.jsxinc"
//@include "../lib/Progress.jsxinc"
//@include "../../lib/json2.js"

Exporter = (function() {
    var Exporter = {};

    var splitObjectsToLayers = function(doc, progress) {

        var cutLayer = DocUtils.getOrCreateLayerByName(doc, CUT_LAYER_NAME);
        var printLayer = DocUtils.getOrCreateLayerByName(doc, PRINT_LAYER_NAME);

        DocUtils.unlockAllLayers(doc);

        // Move CUT layer to the top, print layer after it
        cutLayer.move(doc, ElementPlacement.PLACEATBEGINNING);
        printLayer.move(cutLayer, ElementPlacement.PLACEAFTER);

        function getAllLayers(layers){
            var result = [];
            for (var i = 0; i < layers.length; i++) {
                var layer = layers[i];
                result.push(layer);
                result = result.concat(getAllLayers(layer.layers));
            }
            return result;
        }

        var pluginLayers = [CUT_LAYER_NAME, PRINT_LAYER_NAME, REGMARKS_LAYER_NAME];

        // Save other layers
        var otherLayers = DocUtils.getAllLayers(doc, function(l){
            return _.indexOf(pluginLayers, l.name) == -1;
        });

        var imp = progress.subProgress("prepare", 50);
        var itemsToMove = [];
        for (var i = 0; i < doc.groupItems.length; i++) {
            var group = doc.groupItems[i];

            var targetLayer = null;
            if (group.name == CUT_GROUP_NAME){
                targetLayer = cutLayer;
            }
            if (group.name == PRINT_GROUP_NAME){
                targetLayer = printLayer;
            }
            if (targetLayer){
                itemsToMove.push({
                    item: group,
                    targetLayer: targetLayer
                });
            }
            imp.setPercent(100 * i / doc.groupItems.length);
        }
        imp.setPercent(100);

        var mp = progress.subProgress("move", 100);
        for (var i = 0; i < itemsToMove.length; i++) {
            var item = itemsToMove[i];
            try {
                item.item.move(item.targetLayer, ElementPlacement.PLACEATEND);
            } catch (e) {
                throw "ERROR: moving group " + item.item.name + " from layer " + item.item.layer.name + " to layer " + item.targetLayer.name;
            }
            mp.setPercent(100 * i / itemsToMove.length);
        };
        mp.setPercent(100);
    };

    var exportArtBoards = function(doc, artboardIndexes, exportFolder, opts) {

        $.writeln("Exporting artboards [" + artboardIndexes.join(',') + "] with options: " + JSON.stringify(opts));

        if (!AppUtils.hasPDFPreset(opts.pdfPreset)) {
            throw "PDF preset '" + opts.pdfPreset + "' not found";
        }

        var whatToExport = new ExportForScreensItemToExport();
        // Artboard indexes are 0-based, but exportForScreens expects 1-based
        whatToExport.artboards = _.map(artboardIndexes, function(idx){ return idx + 1; }).join(',');

        var pdfOptions = new ExportForScreensPDFOptions();
        pdfOptions.pdfPreset = opts.pdfPreset;

        doc.exportForScreens(
            exportFolder,
            ExportForScreensType.SE_PDF,
            pdfOptions,
            whatToExport,
            opts.prefix
        );
    };


    Exporter.run = function(origDoc, artboardIndexes, options, progress){
        if (!progress) {
            progress = new Progress();
        }

        if (options.exportTypes.ALL && !options.exportTypes.CUT && !options.exportTypes.PRINT) {
            throw "No export types selected";
        }

        // Make progress wrapper
        progress = progress.subProgress("Export", 100);

        var docBaseName = origDoc.name.replace(/\.[^\.]+$/, '');

        // FIXME: Select dialog or pass?
        var exportFolder = new Folder(origDoc.path + '/' + docBaseName);

        // If folder does not exist, create it
        if (!exportFolder.exists) {
            exportFolder.create();
        }

        $.writeln("Exporting to folder: " + exportFolder.fsName);

        var abCount = artboardIndexes.length;

        // Collect artboards to export
        var artBoardNames = [];
        for (var i = 0; i < abCount; i++) {
            var ab = origDoc.artboards[artboardIndexes[i]];
            artBoardNames.push(ab.name);
        }


        var docCopy = null;

        // Cleanup function to close the document copy
        var cleanup = function(){
            if (docCopy) {
                docCopy.close(SaveOptions.DONOTSAVECHANGES);
            }
        };

        try
        {
            docCopy = DocUtils.duplicate(origDoc);

            // Unlock all layers
            var allLayers = DocUtils.getAllLayers(docCopy);
            for (var i = 0; i < allLayers.length; i++) {
                allLayers[i].locked = false;
            }

            progress.setPercent(10);

            // Delete unused artboards and its content
            var abLength = docCopy.artboards.length;
            //for (var i = 0; i < docCopy.artboards.length; i++) {
            for (var i = abLength - 1; i >= 0; i--) {
                var ab = docCopy.artboards[i];

                docCopy.artboards.setActiveArtboardIndex(i);

                if (_.indexOf(artBoardNames, ab.name) == -1) {
                    docCopy.selectObjectsOnActiveArtboard();
                    app.cut();
                    docCopy.selection = null;
                    ab.remove();
                }
            }

            app.redraw();
            progress.setPercent(20);


            // New Artboard indexes after deleting unused
            var docCopyArtBoardIndexes = [];
            for (var i = 0; i < artBoardNames.length; i++) {
                var ab = docCopy.artboards.getByName(artBoardNames[i]);
                docCopyArtBoardIndexes.push(_.indexOf(docCopy.artboards, ab));
            }

            // Symbols to shapes
            DocUtils.convertSymbolsToShapes(docCopy,
                progress.subProgress("Symbols to shapes", 40)
            );

            // Split objects to layers
            splitObjectsToLayers(docCopy,
                progress.subProgress("Split to layers", 65)
            );

            // Remove unused layers
            DocUtils.removeUnusedLayers(docCopy,
                progress.subProgress("Remove unused layers", 90)
            );

            // Export results
            $.writeln('Exporting to ' + exportFolder.fsName);

            var cutLayer = docCopy.layers.getByName(CUT_LAYER_NAME);
            var printLayer = docCopy.layers.getByName(PRINT_LAYER_NAME);

            // Export ALL
            if (options.exportTypes.ALL){
                cutLayer.visible = true;
                printLayer.visible = true;
                exportArtBoards(docCopy, docCopyArtBoardIndexes, exportFolder, {
                    'prefix': EXPORT_ALL_PREFIX,
                    'pdfPreset': options.exportPresets.ALL
                });
            }

            progress.setPercent(93);

            // Export CUT
            if (options.exportTypes.CUT){
                cutLayer.visible = true;
                printLayer.visible = false;
                exportArtBoards(docCopy, docCopyArtBoardIndexes, exportFolder, {
                    'prefix': EXPORT_CUT_PREFIX,
                    'pdfPreset': options.exportPresets.CUT
                });
            }

            progress.setPercent(96);

            // Export PRINT
            if (options.exportTypes.PRINT){
                cutLayer.visible = false;
                printLayer.visible = true;
                exportArtBoards(docCopy, docCopyArtBoardIndexes, exportFolder, {
                    'prefix': EXPORT_PRINT_PREFIX,
                    'pdfPreset': options.exportPresets.PRINT
                });
            }

            progress.setPercent(99);

            cleanup();

            progress.setPercent(100);

        } catch (e) {
            $.writeln('ERROR: ' + e);
            cleanup();
            throw e;
        }

    };

    return Exporter;
})();