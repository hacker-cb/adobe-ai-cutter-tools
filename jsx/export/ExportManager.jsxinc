//@include "../const.jsxinc"
//@include "../lib/DocUtils.jsxinc"
//@include "../lib/Progress.jsxinc"

ExportManager = (function() {
    var em = {};

    var splitObjectsToLayers = function(doc, progress) {

        var cutLayer = DocUtils.getOrCreateLayerByName(doc, CUT_LAYER_NAME);
        var printLayer = DocUtils.getOrCreateLayerByName(doc, PRINT_LAYER_NAME);

        DocUtils.unlockAllLayers(doc);

        // Move CUT layer to the top, print layer after it
        cutLayer.move(doc, ElementPlacement.PLACEATBEGINNING);
        printLayer.move(cutLayer, ElementPlacement.PLACEAFTER);

        function getAllLayers(layers){
            var result = [];
            for (var i = 0; i < layers.length; i++) {
                var layer = layers[i];
                result.push(layer);
                result = result.concat(getAllLayers(layer.layers));
            }
            return result;
        }

        var pluginLayers = [CUT_LAYER_NAME, PRINT_LAYER_NAME, REGMARKS_LAYER_NAME];

        // Save other layers
        var otherLayers = DocUtils.getAllLayers(doc, function(l){
            return _.indexOf(pluginLayers, l.name) == -1;
        });

        var imp = progress.subProgress("Prepare", 50);
        var itemsToMove = [];
        for (var i = 0; i < doc.groupItems.length; i++) {
            var group = doc.groupItems[i];

            var targetLayer = null;
            if (group.name == CUT_GROUP_NAME){
                targetLayer = cutLayer;
            }
            if (group.name == PRINT_GROUP_NAME){
                targetLayer = printLayer;
            }
            if (targetLayer){
                itemsToMove.push({
                    item: group,
                    targetLayer: targetLayer
                });
            }
            imp.setPercent(100 * i / doc.groupItems.length);
        }
        imp.setPercent(100);

        var mp = progress.subProgress("Move", 100);
        for (var i = 0; i < itemsToMove.length; i++) {
            var item = itemsToMove[i];
            try {
                item.item.move(item.targetLayer, ElementPlacement.PLACEATEND);
            } catch (e) {
                throw "ERROR: moving group " + item.item.name + " from layer " + item.item.layer.name + " to layer " + item.targetLayer.name;
            }
            mp.setPercent(100 * i / itemsToMove.length);
        };
        mp.setPercent(100);
    };

    var runExport = function(progress, artBoardNames){

        try {
            var srcDoc = app.activeDocument;

            var doc = DocUtils.duplicate(srcDoc,
                progress.subProgress("Duplicate", 40)
                );

            DocUtils.convertSymbolsToShapes(doc,
                progress.subProgress("Symbols to shapes", 60)
                );

            splitObjectsToLayers(doc,
                progress.subProgress("Split to layers", 70)
                );

            DocUtils.removeUnusedLayers(doc,
                progress.subProgress("Remove unused layers", 80)
                );

            // Export
            // var ep = progress.subProgress("Exporting", 100);
            // for (var i = 0; i < artBoardNames.length; i++) {
            //     var artBoardName = artBoardNames[i];
            //     exportArtBoardAsPdf(doc, artBoardName);
            //     ep.setPercent(100 * i / artBoardNames.length);
            // }

            progress.setPercent(100);

            app.redraw();
        } catch (e) {
            alert(e);
        }
    };

    em.exportPrintAndCut = function(){
        /*
        Code for Import https://scriptui.joonas.me â€” (Triple click to select):
        {"activeId":0,"items":{"item-0":{"id":0,"type":"Dialog","parentId":false,"style":{"enabled":true,"varName":"exportDialog","windowType":"Dialog","creationProps":{"su1PanelCoordinates":false,"maximizeButton":false,"minimizeButton":false,"independent":false,"closeButton":false,"borderless":false,"resizeable":false},"text":"PlotterTools export","preferredSize":[0,0],"margins":16,"orientation":"column","spacing":10,"alignChildren":["fill","top"]}},"item-1":{"id":1,"type":"Progressbar","parentId":0,"style":{"enabled":true,"varName":"progressBar","preferredSize":[400,10],"alignment":null,"helpTip":null}},"item-3":{"id":3,"type":"StaticText","parentId":0,"style":{"enabled":true,"varName":"currentOperation","creationProps":{"truncate":"none","multiline":false,"scrolling":false},"softWrap":false,"text":"Operation","justify":"left","preferredSize":[0,0],"alignment":null,"helpTip":null}},"item-4":{"id":4,"type":"Button","parentId":5,"style":{"enabled":true,"varName":"startButton","text":"Run","justify":"center","preferredSize":[0,0],"alignment":null,"helpTip":null}},"item-5":{"id":5,"type":"Group","parentId":0,"style":{"enabled":true,"varName":"buttonsGroup","preferredSize":[0,0],"margins":0,"orientation":"row","spacing":10,"alignChildren":["center","center"],"alignment":null}},"item-6":{"id":6,"type":"Button","parentId":5,"style":{"enabled":true,"varName":"closeButton","text":"Close","justify":"center","preferredSize":[0,0],"alignment":null,"helpTip":null}},"item-7":{"id":7,"type":"StaticText","parentId":0,"style":{"enabled":true,"varName":"currentStage","creationProps":{"truncate":"none","multiline":false,"scrolling":false},"softWrap":false,"text":"Stage","justify":"left","preferredSize":[0,0],"alignment":"right","helpTip":null}}},"order":[0,3,1,7,5,4,6],"settings":{"importJSON":true,"indentSize":false,"cepExport":false,"includeCSSJS":true,"showDialog":false,"functionWrapper":false,"afterEffectsDockable":false,"itemReferenceList":"none"}}
        */

        // EXPORTDIALOG
        // ============
        var exportDialog = new Window("dialog", undefined, undefined, {closeButton: false});
            exportDialog.text = "PlotterTools export";
            exportDialog.orientation = "column";
            exportDialog.alignChildren = ["fill","top"];
            exportDialog.spacing = 10;
            exportDialog.margins = 16;

        var currentOperation = exportDialog.add("statictext", undefined, undefined, {name: "currentOperation"});
            currentOperation.text = "Operation";

        var progressBar = exportDialog.add("progressbar", undefined, undefined, {name: "progressBar"});
            progressBar.maxvalue = 100;
            progressBar.value = 50;
            progressBar.preferredSize.width = 400;
            progressBar.preferredSize.height = 10;

        var currentStage = exportDialog.add("statictext", undefined, undefined, {name: "currentStage"});
            currentStage.text = "Stage";
            currentStage.alignment = ["right","top"];

        // BUTTONSGROUP
        // ============
        var buttonsGroup = exportDialog.add("group", undefined, {name: "buttonsGroup"});
            buttonsGroup.orientation = "row";
            buttonsGroup.alignChildren = ["center","center"];
            buttonsGroup.spacing = 10;
            buttonsGroup.margins = 0;

        var startButton = buttonsGroup.add("button", undefined, undefined, {name: "startButton"});
            startButton.text = "Run";

        var closeButton = buttonsGroup.add("button", undefined, undefined, {name: "closeButton"});
            closeButton.text = "Close";


        ////////////////////////////////////////////////////

        currentOperation.text = '';
        currentStage.text = '';
        progressBar.value = 0;

        var progress = new Progress(function(stage, totalProgress){
            progressBar.value = totalProgress;
            currentStage.text = stage;
            exportDialog.update();
            // $.writeln("Progress: " + stage + " " + totalProgress);
        });

        startButton.onClick = function() {
            startButton.enabled = false;
            closeButton.enabled = false;
            var doc = app.activeDocument;

            // FIXME: Use dialog to select artboards
            var artBoardNames = [];
            for (var i = 0; i < doc.artboards.length; i++) {
                var artBoard = doc.artboards[i];
                artBoardNames.push(artBoard.name);
            }

            runExport(progress, artBoardNames);

            // startButton.enabled = true;
            closeButton.enabled = true;
        };

        closeButton.onClick = function() {
            exportDialog.close();
        };

        exportDialog.show();
    }

    return em;
})();