//@include "./Exporter.jsxinc"
//@include "../const.jsxinc"
//@include "../lib/AppUtils.jsxinc"
//@include "../lib/DocUtils.jsxinc"
//@include "../lib/Progress.jsxinc"
//@include "../../lib/json2.js"

ExporterService = (function() {
    var ExporterService = {};

    var pluginLayers = [CUT_LAYER_NAME, PRINT_LAYER_NAME, REGMARKS_LAYER_NAME];

    var splitObjectsToLayers = function(doc, progress) {

        var cutLayer = DocUtils.getOrCreateLayerByName(doc, CUT_LAYER_NAME);
        var printLayer = DocUtils.getOrCreateLayerByName(doc, PRINT_LAYER_NAME);

        DocUtils.unlockAllLayers(doc);

        // Move CUT layer to the top, print layer after it
        cutLayer.move(doc, ElementPlacement.PLACEATBEGINNING);
        printLayer.move(cutLayer, ElementPlacement.PLACEAFTER);


        var itemsToMove = [];

        // Check group items
        progress = progress.subProgress("check groups", 25);
        for (var i = 0; i < doc.groupItems.length; i++) {
            var group = doc.groupItems[i];

            if (group.name == CUT_GROUP_NAME){
                itemsToMove.push({ item: group, targetLayer: cutLayer });
            }
            if (group.name == PRINT_GROUP_NAME){
                itemsToMove.push({ item: group, targetLayer: printLayer });
            }

            progress.setPercent(100 * i / doc.groupItems.length);
        }
        progress = progress.finish();

        // Check layer items
        progress = progress.subProgress("check layers", 50);
        for (var i = 0; i < doc.layers.length; i++) {
            var layer = doc.layers[i];

            if (layer.parent == doc || layer.hidden){
                // Skip top level layers
                continue;
            }
            if (layer.name == CUT_LAYER_NAME){
                itemsToMove.push({ item: group, targetLayer: cutLayer });
            }
            if (layer.name == PRINT_LAYER_NAME){
                itemsToMove.push({ item: group, targetLayer: printLayer });
            }
        }
        progress = progress.subProgress("check groups", 25);

        // Move items
        progress = progress.subProgress("move", 100);
        for (var i = 0; i < itemsToMove.length; i++) {
            var group = itemsToMove[i];
            try {
                group.item.move(group.targetLayer, ElementPlacement.PLACEATEND);
            } catch (e) {
                throw "ERROR: moving group " + group.item.name + " from layer " + group.item.layer.name + " to layer " + group.targetLayer.name;
            }
            progress.setPercent(100 * i / itemsToMove.length);
        };
        progress = progress.finish();
    };

    ExporterService.run = function(origDoc, artBoardNames, options, progress){
        $.writeln("ExporterService.run, artboards: [" + artBoardNames.join(", ")  + "], options: " + JSON.stringify(options));
        if (!progress) {
            progress = new Progress();
        }
        if (!options.exportTypes.ALL && !options.exportTypes.CUT && !options.exportTypes.PRINT) {
            throw "No export types selected";
        }
        if (!options.path){
            throw "No export path specified";
        }
        if (typeof(artBoardNames) != "object" || artBoardNames.length == 0) {
            throw "No artboards passed";
        }

        // Make progress wrapper
        progress = progress.subProgress("Export", 100);

        // FIXME: Select dialog or pass?
        var exportFolder = new Folder(options.path);

        // If folder does not exist, create it
        if (!exportFolder.exists) {
            exportFolder.create();
            $.writeln("Created folder: " + exportFolder.fsName);
        }

        $.writeln("Start export, folder: " + exportFolder.fsName);

        var docCopy = null;

        // Cleanup function to close the document copy
        var cleanup = function(){
            if (docCopy) {
                docCopy.close(SaveOptions.DONOTSAVECHANGES);
            }
        };

        try
        {
            $.writeln("Export: duplicating document");

            docCopy = DocUtils.duplicate(origDoc);

            // Unlock all layers
            $.writeln("Unlocking all layers");
            DocUtils.unlockAllLayers(docCopy);

            progress.setPercent(10);

            $.writeln("Deleting unused artboards");
            // Delete unused artboards and its content
            var abLength = docCopy.artboards.length;
            //for (var i = 0; i < docCopy.artboards.length; i++) {
            for (var i = abLength - 1; i >= 0; i--) {
                var ab = docCopy.artboards[i];

                docCopy.artboards.setActiveArtboardIndex(i);

                if (_.indexOf(artBoardNames, ab.name) == -1) {
                    $.writeln("Deleting artboard [" + i + "]: " + ab.name);
                    docCopy.selectObjectsOnActiveArtboard();
                    app.cut();
                    docCopy.selection = null;
                    ab.remove();
                } else {
                    $.writeln("Keeping artboard [" + i + "]: " + ab.name);
                }
            }

            app.redraw();
            progress.setPercent(20);

            // Symbols to shapes
            $.writeln("Converting symbols to shapes");
            DocUtils.convertSymbolsToShapes(docCopy,
                progress.subProgress("Symbols to shapes", 40)
            );

            // Unlock all layers - after symbols to shapes
            $.writeln("Unlocking all layers (after symbols to shapes)");
            DocUtils.unlockAllLayers(docCopy);
            progress.setPercent(42);

            // Split objects to layers
            $.writeln("Splitting objects to layers");
            splitObjectsToLayers(docCopy,
                progress.subProgress("Split to layers", 80)
            );

            // Remove unused/hidden layers
            $.writeln("Removing unused/hidden layers");
            progress = progress.subProgress("Remove unused layers", 90);
            var removeUnusedOrHiddenLayers = function(docObj){
                var len = docObj.layers.length;

                for (var i = len - 1; i >= 0; i--) {
                    var layer = docObj.layers[i];
                    if (_.indexOf(pluginLayers, layer.name) != -1 && layer.parent == docCopy){
                        $.writeln("Skipping empty plugin layer: " + DocUtils.objFullPath(layer));
                        continue;
                    }
                    if (layer.hidden){
                        $.writeln("Removing hidden layer: " + DocUtils.objFullPath(layer));
                        layer.removeAll();
                        layer.remove();
                    }
                    else if (layer.pageItems.length == 0 && layer.layers.length == 0){
                        $.writeln("Removing layer without page items and sub-layers " + DocUtils.objFullPath(layer));
                        layer.remove();
                    }
                    else {
                        removeUnusedOrHiddenLayers(layer);
                    }
                };
            };
            removeUnusedOrHiddenLayers(docCopy);
            progress = progress.finish();

            // Export results
            $.writeln('Exporting to ' + exportFolder.fsName);

            var cutLayer = docCopy.layers.getByName(CUT_LAYER_NAME);
            var printLayer = docCopy.layers.getByName(PRINT_LAYER_NAME);

            // Export ALL
            if (options.exportTypes.ALL){
                $.writeln('Export ALL');
                progress = progress.subProgress("Export ALL", 93);
                cutLayer.visible = true;
                printLayer.visible = true;
                Exporter.exportForScreens(docCopy, artBoardNames, exportFolder, {
                    'type': 'PDF',
                    'prefix': EXPORT_ALL_PREFIX,
                    'pdfPreset': options.exportPresets.ALL,
                    'overwrite': options.overwrite,
                });
                progress = progress.finish();
            }

            // Export PRINT
            if (options.exportTypes.PRINT){
                $.writeln('Export PRINT');
                progress = progress.subProgress("Export PRINT", 96);
                cutLayer.visible = false;
                printLayer.visible = true;
                Exporter.exportForScreens(docCopy, artBoardNames, exportFolder, {
                    'type': 'PDF',
                    'prefix': EXPORT_PRINT_PREFIX,
                    'pdfPreset': options.exportPresets.PRINT,
                    'overwrite': options.overwrite,
                });
                progress = progress.finish();
            }

            // Export CUT
            if (options.exportTypes.CUT){
                $.writeln('Export CUT');
                progress = progress.subProgress("Export CUT", 99);
                cutLayer.visible = true;
                printLayer.visible = false;
                Exporter.exportForScreens(docCopy, artBoardNames, exportFolder, {
                    'type': 'PDF',
                    'prefix': EXPORT_CUT_PREFIX,
                    'pdfPreset': options.exportPresets.CUT,
                    'overwrite': options.overwrite,
                });
                progress = progress.finish();
            }

            $.writeln('Cleanup...');

            cleanup();

            progress = progress.finish();

        } catch (e) {
            $.writeln('ERROR: "' + e.message + '" ' + e.fileName + ":" + e.line);
            cleanup();
            throw e;
        }

    };

    return ExporterService;
})();