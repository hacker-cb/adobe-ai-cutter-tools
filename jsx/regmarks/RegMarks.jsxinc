//@include "../const.jsxinc"
//@include "../CutterToolsPrefs.jsxinc"
//@include "../../lib/json2.js"

var RegMarks = (function(){

    var RegMarks = {};

    var BUNDLED_PATHSTYLES = {
        'Black circles': {
            'bundled': true,
            'type': 'circles',
            'stroke': false,
            'fill': {
                'color': {
                    'black': 100,
                    'cyan': 0,
                    'magenta': 0,
                    'yellow': 0,
                }
            }
        },
    };


    var BUNDLED_PRESETS = {
        'Vulcan DC-500VC (10mm border)': {
            'bundled': true,
            'units': 'mm',
            'markDistance': 10.0,
            'markDiameter': 5.0,
            'pathStyle': 'Black circles',
        },
        'Vulcan DC-500VC (7mm border)': {
            'bundled': true,
            'units': 'mm',
            'markDistance': 7.0,
            'markDiameter': 5.0,
            'pathStyle': 'Black circles',
        },
    };

    var getLayer = function(doc) {
        try {
            return doc.layers.getByName(REGMARKS_LAYER_NAME);
        } catch (e){
            return null;
        }
    };

    var createLayer = function(doc) {
        if (getLayer(doc)){
            throw 'Layer "' + REGMARKS_LAYER_NAME + '" already exist';
        }

        var l = doc.layers.add();
        l.name = REGMARKS_LAYER_NAME;

        // Move layer to the end of list
        l.locked = false;
        l.move(doc, ElementPlacement.PLACEATEND);
        l.locked = true

        return l;
    };

    var clearLayer = function(doc) {
        var l = getLayer(doc);

        if (!l) {
            throw 'Layer "' + REGMARKS_LAYER_NAME + '" not exist';
        }

        l.locked = false; // Unlock layer

        while (l.pageItems.length > 0){
            var item = l.pageItems[0];
            //$.writeln('Deleting item: ' + item.name);
            l.pageItems[0].remove();
        }


        l.locked = true; // Lock layer
    };

    /**
     * Get all presets
     *
     * @returns {Object} - key: preset name, value: preset data
     */
    RegMarks.getAllPresets = function(){
        // Workaround to make copy of object
        var presets = JSON.parse(JSON.stringify(BUNDLED_PRESETS));

        var user_presets = CutterToolsPrefs.get('regmarks.user_presets');
        if (user_presets) {
            for (var name in user_presets){
                presets[name] = user_presets[name];
            }
        }

        return presets;
    };

    /**
     * Get preset by name
     *
     * @param {String} presetName - preset name
     * @returns {Object|null} - preset data or null if preset not found
     */
    RegMarks.getPreset = function(presetName){
        var presets = RegMarks.getAllPresets();
        for (var name in presets){
            if (name == presetName){
                return presets[name];
            }
        }
        return null;
    };

    /**
     * Save user preset
     *
     * @param presetName Preset name
     * @param presetData Preset data
     *
     * @throws
     */
    RegMarks.saveUserPreset = function(presetName, presetData){
        var user_presets = CutterToolsPrefs.get('regmarks.user_presets',{});

        user_presets[presetName] = presetData;

        CutterToolsPrefs.set('regmarks.user_presets', user_presets);

        $.writeln('Preset "' + presetName + '" saved');
    };

    /**
     * Delete user preset
     *
     * @param presetName
     * @throws {Error} - if preset not found
     */
    RegMarks.deleteUserPreset = function(presetName){
        var user_presets = CutterToolsPrefs.get('regmarks.user_presets');
        if (!user_presets) {
            throw 'No user presets found';
        }
        if (!user_presets[presetName]) {
            throw 'Preset "' + presetName + '" not found';
        }
        delete user_presets[presetName];

        CutterToolsPrefs.set('regmarks.user_presets', user_presets);

        $.writeln('Preset "' + presetName + '" deleted');
    }

    /**
     * Get all path styles
     *
     * @returns {Object} - key: path style name, value: path style data
     */
    RegMarks.getAllPathStyles = function(){
        // Workaround to make copy of object
        var pathStyles = JSON.parse(JSON.stringify(BUNDLED_PATHSTYLES));

        // FIXME: load path styles from preferences.
        return pathStyles;
    };

    /**
     * Get path style by name
     *
     * @param {String} pathStyleName - path style name
     * @returns {Object|null} - path style data or null if path style not found
     */
    RegMarks.getPathStyle = function(pathStyleName){
        var pathStyles = RegMarks.getAllPathStyles();
        for (var name in pathStyles){
            if (name == pathStyleName){
                return pathStyles[name];
            }
        }
        return null;
    };

    RegMarks.deleteLayer = function(doc) {
        var l = getLayer(doc);

        if (!l) {
            $.writeln('Layer "' + REGMARKS_LAYER_NAME + '" not exist, nothing to delete')
            return false;
        }

        l.locked = false; // Unlock layer
        l.remove();

        return true;
    };

    RegMarks.generateMarks = function(doc, presetData){
        $.writeln('Generating regmarks, data: ' + JSON.stringify(presetData));

        var pathStyle = RegMarks.getPathStyle(presetData.pathStyle);

        if (!pathStyle) {
            throw 'Unknown pathStyle "' + presetData.pathStyle;
        }

        var layer = getLayer(doc);
        if (!layer) {
            layer = createLayer(doc);
        } else {
            clearLayer(doc);
        }

        doc.activeLayer = layer;

        layer.locked = false; // Unlock layer

        // Create new items
        for (var i = 0; i <  doc.artboards.length; i++) {
            var ab = doc.artboards[i];

            var abRect = ab.artboardRect; // left, top, right, bottom (in `pt` units)

            var left = abRect[0];
            var top = abRect[1];
            var right = abRect[2];
            var bottom = abRect[3];

            var width = right - left;
            var height = top - bottom;

            $.writeln('Creating regmarks for artboard: "' + ab.name + '", size: [' + abRect + '] (' + width + '*' + height + ')');

            var dist = new UnitValue(presetData.markDistance, presetData.units).as('pt');
            var diam = new UnitValue(presetData.markDiameter, presetData.units).as('pt');

            var group = layer.groupItems.add();
            group.name = ab.name;

            // Create circle in each corner.
            // pathItems.ellipse([top][, left][, width][, height])
            var marks = [
                // left top
                group.pathItems.ellipse(top - dist, left + dist, diam, diam),
                // right top
                group.pathItems.ellipse(top - dist, right - dist - diam, diam, diam),
                // left bottom
                group.pathItems.ellipse(bottom + dist + diam, left + dist, diam, diam),
                // right bottom
                group.pathItems.ellipse(bottom + dist +diam, right - dist - diam, diam, diam),
            ];

            marks[0].name = ab.name + ' [left top]';
            marks[1].name = ab.name + ' [right top]';
            marks[2].name = ab.name + ' [left bottom]';
            marks[3].name = ab.name + ' [right bottom]';

            // Apply path style
            for (var j = 0; j < marks.length; j++) {

                // Fill
                if (!pathStyle.fill){
                    marks[j].filled = false;
                } else {
                    marks[j].filled = true;

                    var c = new CMYKColor();
                    c.black = pathStyle.fill.color.black;
                    c.cyan = pathStyle.fill.color.cyan;
                    c.magenta = pathStyle.fill.color.magenta;
                    c.yellow = pathStyle.fill.color.yellow;

                    marks[j].fillColor = c;
                }

                // Stroke
                if (!pathStyle.stroke){
                    marks[j].stroked = false;
                } else {
                    marks[j].stroked = true;

                    var c = new CMYKColor();
                    c.black = pathStyle.stroke.color.black;
                    c.cyan = pathStyle.stroke.color.cyan;
                    c.magenta = pathStyle.stroke.color.magenta;
                    c.yellow = pathStyle.stroke.color.yellow;

                    marks[j].strokeColor = c;
                }
            }
        }

        layer.locked = true; // Lock layer

        return true;
    };

    return RegMarks;
})();

