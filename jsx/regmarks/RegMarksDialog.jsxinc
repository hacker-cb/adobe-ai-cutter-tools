//@include "../../lib/underscore-umd.js"
//@include "../CutterToolsPrefs.jsxinc"
//@include "regmarks_panel.jsxinc"
//@include "RegMarks.jsxinc"

var RegMarksDialog = (function () {
    var RegMarksDialog = {};

    // FIXME: Eval regmarks_panel.jsxinc in this context

    var panel = regmarks_panel;

    var fillPresets = function(){
        panel.items.preset.removeAll();

        for (profile in RegMarks.PROFILES.items){
            panel.items.preset.add('item', profile);
        }

    };

    var selectPreset = function(presetName){
        var found = panel.items.preset.find(presetName);
        if (found != null){
            panel.items.preset.selection = found;
        } else {
            $.writeln('Preset not found: ' + presetName);
            panel.items.preset.selection = panel.items.preset.items[0];
        }
    };


    var fillStyles = function(){
        panel.items.style.removeAll();

        for (profile in RegMarks.PATHSTYLE.items){
            panel.items.style.add('item', profile);
        }

    };

    var selectStyle = function(styleName){
        var found = panel.items.style.find(styleName);
        if (found != null){
            panel.items.style.selection = found;
        } else {
            $.writeln('Style not found: ' + styleName);
            panel.items.style.selection = panel.items.style.items[0];
        }
    };

    var selectUnits = function(unitName){
        var found = panel.items.units.find(unitName);
        if (found != null){
            panel.items.units.selection = found;
        } else {
            $.writeln('Unit not found: ' + unitName);
            panel.items.units.selection = panel.items.units.items[0];
        }
    }

    var setupHandlers = function(){

        panel.items.preset.onChange = function(){
            var curSelection = this.selection ? this.selection.text : null;

            $.writeln('selection: curSelection' + curSelection);

            var profile = RegMarks.PROFILES.get(curSelection);

            selectStyle(profile.pathStyle);
            selectUnits(profile.units);

            panel.items.distance.text = profile.markDistance;
            panel.items.radius.text = profile.markDiameter;

            // Save preset
            CutterToolsPrefs.set('regmarks.last_preset', curSelection);
        }

        panel.items.close_button.onClick = function(){
            panel.close();
        };

        panel.items.create_regmarks_button.onClick = function(){
            $.writeln('create_regmarks_button');

            var doc = app.activeDocument;

            var profileName = panel.items.preset.selection.text;
            var preset = {
                'units': panel.items.units.selection.text,
                'markDistance': panel.items.distance.text,
                'markDiameter': panel.items.radius.text,
                'pathStyle': panel.items.style.selection.text,
            }

            if (!preset) {
                throw 'Unknown preset "' + profileName;
            }

            RegMarks.generateMarks(doc, preset);

            // Refresh document
            doc.activeLayer.visible = false;
            doc.activeLayer.visible = true;

            app.redraw();
        }

        panel.items.clear_regmarks_button.onClick = function(){
            $.writeln('clear_regmarks_button');

            RegMarks.deleteLayer(app.activeDocument);

            app.redraw();
        }
    };

    RegMarksDialog.run = function(){
        setupHandlers();

        fillStyles();
        fillPresets();

        var last_preset_text = CutterToolsPrefs.get('regmarks.last_preset');
        if (!last_preset_text){
            last_preset_text = _.keys(RegMarks.PROFILES.items)[0];
        }


        selectPreset(last_preset_text)
        panel.show();
    };

    return RegMarksDialog;
}());


// $.writeln('regmarks.jsx -init');

// function createRegMarks(){
//     $.writeln("createRegMarks");
//     alert("createRegMarks js");

// }

// function clearRegMarks(){
//     $.writeln("clearRegMarks");
//     alert("clearRegMarks js");
// }