//@include "../../lib/underscore-umd.js"
//@include "./Progress.jsxinc"

DocUtils = {};

/**
 * Make copy of document
 *
 * @param doc Source document
 * @param progress Progress instance
 * @returns
 */
DocUtils.duplicate = function(doc, progress) {

    // Set empty progress if not set
    if (!progress) progress = new Progress();

    // See https://community.adobe.com/t5/illustrator-discussions/copy-artboard-and-art-to-another-document/m-p/3907417/page/2#M10827

    // Save source docuemtn data
    var srcDocData = {
        documentColorSpace: doc.documentColorSpace,
        units: doc.rulerUnits,
        width: doc.width,
        height: doc.height,
        rulerOrigin: doc.rulerOrigin,
    };

    // Save source artboard data
    var srcAbData = [];
    for (var i = 0; i < doc.artboards.length; i++) {
        var srcAb = doc.artboards[i];
        srcAbData.push({
            name: srcAb.name,
            artboardRect: srcAb.artboardRect,
            rulerOrigin: srcAb.rulerOrigin,
        })
    }

    // This actually does not needed.
    //var docPreset = new DocumentPreset();
    //docPreset.units = srcDocData.units;
    //var dstDoc = app.documents.addDocument(srcDocData.documentColorSpace, docPreset);

    // Create new document
    var dstDoc = app.documents.add(srcDocData.documentColorSpace);
    dstDoc.rulerOrigin = srcDocData.rulerOrigin;

    // Create ArtBoards
    var abp = progress.subProgress('Creating artboards', 10);
    var defaultArtboard = dstDoc.artboards[0];
    for (var i = 0; i < srcAbData.length; i++) {
        var ab = dstDoc.artboards.add(srcAbData[i].artboardRect);
        ab.name = srcAbData[i].name;
        ab.rulerOrigin = srcAbData[i].rulerOrigin;

        abp.setPercent(i / srcAbData.length * 100);
    }
    defaultArtboard.remove(); // Remove default artboard
    abp.setPercent(100);


    // Duplicate layers structure
    var dlp = progress.subProgress('Duplicate layers structure', 20);
    var lockedLayers = [];
    var defaultLayer = dstDoc.layers[0];
    for (var i = 0; i < doc.layers.length; i++) {
        var srcLayer = doc.layers[i];
        var dstLayer = dstDoc.layers.add();

        dstLayer.move(dstDoc, ElementPlacement.PLACEATEND);

        dstLayer.name = srcLayer.name;
        dstLayer.visible = srcLayer.visible;

        //dstLayer.locked = srcLayer.locked; // We lock later
        if (srcLayer.locked) {
            lockedLayers.push(dstLayer);
        }

        dlp.setPercent(i / doc.layers.length * 100);
    }
    defaultLayer.remove(); // Remove default layer
    dlp.setPercent(100);


    // Copy page items
    var cpip = progress.subProgress('Copy page items', 95);
    for (var i = 0; i < doc.pageItems.length; i++) {
        var srcItem = doc.pageItems[i];
        if (srcItem.parent instanceof Layer) {
            var dstItem = srcItem.duplicate(dstDoc.layers[srcItem.layer.name], ElementPlacement.PLACEATEND);
            dstItem.left = srcItem.left;
            dstItem.top = srcItem.top;
        }
        cpip.setPercent(i / doc.pageItems.length * 100);
    }
    cpip.setPercent(100);

    // Lock locked layers back
    var lockLockedLayersProgress = progress.subProgress('Lock locked layers', 100);
    for (var i = 0; i < lockedLayers.length; i++) {
        lockedLayers[i].locked = true;
        lockLockedLayersProgress.setPercent(i / lockedLayers.length * 100);
    }
    lockLockedLayersProgress.setPercent(100);

    progress.setPercent(100);

    return dstDoc;
};

/**
 * Convert all symbols to shapes
 *
 * @param doc Source document
 * @param progress Progress instance
 */
DocUtils.convertSymbolsToShapes = function(doc, progress){
    // Set empty progress if not set
    if (!progress) progress = new Progress();

    var pass = 0;

    var totalItemsToProcess = doc.symbolItems.length;
    var totalItemsProcessed = 0;

    var dp = progress.subProgress('Disassamble', 95);

    while (doc.symbolItems.length != 0){

        var lenBefore = doc.symbolItems.length;

        var symbolItem = doc.symbolItems[0];
        symbolItem.breakLink();

        var diff = doc.symbolItems.length - lenBefore;

        totalItemsToProcess += diff + 1;

        totalItemsProcessed++;

        dp.setPercent(totalItemsProcessed / totalItemsToProcess * 100);
    }

    dp.setPercent(100);

    var rsp = progress.subProgress('Remove symbols', 100);

    doc.symbols.removeAll();

    rsp.setPercent(100);
};

/**
 * Set visibility of groups
 *
 * @param doc Document
 * @param names Array or string of group names
 * @param visible Visibility
 */
DocUtils.setGroupsVisibility = function(doc, names, visible){
    if (!_.isArray(names)){
        names = [names];
    }
    for (var i = 0; i < doc.groupItems.length; i++) {
        var group = doc.groupItems[i];

        if (_.indexOf(names, group.name) != -1) {
            $.writeln("Set group " + group.name + " visible: " + visible);
            var locked = group.locked;
            if (locked){
                group.locked = false;
            }
            group.hidden = !visible;
            if (locked){
                group.locked = true;
            }
        } else {
            // $.writeln("Skip group " + group.name);
        }
    }
}

/**
 * Unlock all layers
 *
 * @param doc Document
 * @returns Array of layers which were locked
 */
DocUtils.unlockAllLayers = function(doc){
    var lockedLayers = [];
    for (var i = 0; i < doc.layers.length; i++) {
        var layer = doc.layers[i];
        layer.locked = false;
        lockedLayers.push(layer);
    }
    return lockedLayers;
}

/**
 * Get or create layer by name
 *
 * @param doc Document
 * @param name Layer name
 * @returns Layer
 */
DocUtils.getOrCreateLayerByName = function(doc, name){
    try {
        var layer = doc.layers.getByName(name);
        return layer;
    } catch (e) {
        var layer = doc.layers.add();
        layer.name = name;
        return layer;
    }
}

/**
 * Get all layers, included inherited
 *
 * @param doc Document
 * @param cbfilter Callback filter
 * @returns Array of layers
 */
DocUtils.getAllLayers = function(doc, cbfilter){
    function getAllLayers(layers){
        var result = [];
        for (var i = 0; i < layers.length; i++) {
            var layer = layers[i];
            if (!cbfilter || cbfilter(layer)){
                result.push(layer);
            }
            result = result.concat(getAllLayers(layer.layers));
        }
        return result;
    };

    var layers = getAllLayers(doc.layers);

    return layers;
}
