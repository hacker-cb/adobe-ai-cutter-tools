//@include "../../lib/underscore-umd.js"

DocUtils = {};

/**
 * Make copy of document
 *
 * @param srcDoc Source document
 * @returns
 */
DocUtils.duplicate = function(srcDoc) {

    // See https://community.adobe.com/t5/illustrator-discussions/copy-artboard-and-art-to-another-document/m-p/3907417/page/2#M10827

    // Save source docuemtn data
    var srcDocData = {
        documentColorSpace: srcDoc.documentColorSpace,
        units: srcDoc.rulerUnits,
        width: srcDoc.width,
        height: srcDoc.height,
        rulerOrigin: srcDoc.rulerOrigin,
    };

    // Save source artboard data
    var srcAbData = [];
    for (var i = 0; i < srcDoc.artboards.length; i++) {
        var srcAb = srcDoc.artboards[i];
        srcAbData.push({
            name: srcAb.name,
            artboardRect: srcAb.artboardRect,
            rulerOrigin: srcAb.rulerOrigin,
        })
    }

    // This actually does not needed.
    //var docPreset = new DocumentPreset();
    //docPreset.units = srcDocData.units;
    //var dstDoc = app.documents.addDocument(srcDocData.documentColorSpace, docPreset);

    // Create new document
    var dstDoc = app.documents.add(srcDocData.documentColorSpace);
    dstDoc.rulerOrigin = srcDocData.rulerOrigin;

    // Create ArtBoards
    var defaultArtboard = dstDoc.artboards[0];
    for (var i = 0; i < srcAbData.length; i++) {
        var ab = dstDoc.artboards.add(srcAbData[i].artboardRect);
        ab.name = srcAbData[i].name;
        ab.rulerOrigin = srcAbData[i].rulerOrigin;
    }
    defaultArtboard.remove(); // Remove default artboard


    // Duplicate layers structure
    var lockedLayers = [];
    var defaultLayer = dstDoc.layers[0];
    for (var i = 0; i < srcDoc.layers.length; i++) {
        var srcLayer = srcDoc.layers[i];
        var dstLayer = dstDoc.layers.add();

        dstLayer.move(dstDoc, ElementPlacement.PLACEATEND);

        dstLayer.name = srcLayer.name;
        dstLayer.visible = srcLayer.visible;

        //dstLayer.locked = srcLayer.locked; // We lock later
        if (srcLayer.locked) {
            lockedLayers.push(dstLayer);
        }
    }
    defaultLayer.remove(); // Remove default layer


    // Copy page items
    for (var i = 0; i < srcDoc.pageItems.length; i++) {
        var srcItem = srcDoc.pageItems[i];
        if (srcItem.parent instanceof Layer) {
            var dstItem = srcItem.duplicate(dstDoc.layers[srcItem.layer.name], ElementPlacement.PLACEATEND);
            dstItem.left = srcItem.left;
            dstItem.top = srcItem.top;
        }
    }

    // Lock locked layers back
    for (var i = 0; i < lockedLayers.length; i++) {
        lockedLayers[i].locked = true;
    }


    return dstDoc;
};

/**
 * Convert all symbols to shapes
 *
 * @param doc
 */
DocUtils.convertSymbolsToShapes = function(doc){

    var calls = 0;

    var disassamble = function(){
        var startSymbolItemsCount = doc.symbolItems.length;

        if (startSymbolItemsCount == 0){
            return;
        }
        calls++;

        $.writeln('Disassamble call #' + calls + ' with ' + startSymbolItemsCount + ' symbols');

        for (var i = 0; i < doc.symbolItems.length; i++) {
            var symbolItem = doc.symbolItems[i];
            var symbol = symbolItem.symbol;

            symbolItem.breakLink();

            // FIXME: Set new group name according to symbol.name?
        }

        var finishSymbolItemsCount = doc.symbolItems.length;

        if (finishSymbolItemsCount == startSymbolItemsCount){
            throw new Error('Cannot disassamble symbols');
        }

        disassamble(); // Recusive call until all symbols are converted to shapes
    };

    disassamble();

    doc.symbols.removeAll();
};

/**
 * Set visibility of groups
 *
 * @param doc Document
 * @param names Array or string of group names
 * @param visible Visibility
 */
DocUtils.setGroupsVisibility = function(doc, names, visible){
    if (!_.isArray(names)){
        names = [names];
    }
    for (var i = 0; i < doc.groupItems.length; i++) {
        var group = doc.groupItems[i];

        if (_.indexOf(names, group.name) != -1) {
            $.writeln("Set group " + group.name + " visible: " + visible);
            var locked = group.locked;
            if (locked){
                group.locked = false;
            }
            group.hidden = !visible;
            if (locked){
                group.locked = true;
            }
        } else {
            // $.writeln("Skip group " + group.name);
        }
    }
}

/**
 * Unlock all layers
 *
 * @param doc Document
 * @returns Array of layers which were locked
 */
DocUtils.unlockAllLayers = function(doc){
    var lockedLayers = [];
    for (var i = 0; i < doc.layers.length; i++) {
        var layer = doc.layers[i];
        layer.locked = false;
        lockedLayers.push(layer);
    }
    return lockedLayers;
}

/**
 * Get or create layer by name
 *
 * @param doc Document
 * @param name Layer name
 * @returns Layer
 */
DocUtils.getOrCreateLayerByName = function(doc, name){
    try {
        var layer = doc.layers.getByName(name);
        return layer;
    } catch (e) {
        var layer = doc.layers.add();
        layer.name = name;
        return layer;
    }
}
